this.data = {"xymon":{"readme":"\n\n\nXymon is a system for monitoring of hosts and networks, inspired by the Big Brother system. It provides real-time monitoring, an easy web-interface, historical data, availability reports and performance graphs. Xymon was previously known as \"Hobbit\"\n\n\n\nhttp://www.xymonmonitoring.com\n","git":""},"nagios-dashboard":{"readme":"","git":"https://github.com/portertech/nagios-dashboard.git"},"extopus":{"readme":"Tobi Oetiker is working on a new Monitoring Aggregator \n\n http://oss.oetiker.ch/extopus/\n`\n \n according to the home page : \n\n \"Extopus is an aggregating frontend to monitoring systems. Its plug-in architecture provides an easy route to integrating output from a wide array of monitoring systems into a single instance of Extopus.\n\nIntegration can range from simple iframe-ing a particular page from another monitoring system to accessing data from another system using rpc calls and displaying the results in a custom presentation plugin inside the Extopus frontend.\n\nThe Extopus backend is written in Perl (using Mojolicious) and the frontend is written in javascript (with Qooxdoo). This architecture provides a high level of implementation flexibility and allowed us to create a highly interactive end user experience.\n\nWhether you have a small setup with a few hundred or a large one with millions of items, Extopus will provide a user friendly interface to accessing your monitoring data.\"\n","git":"https://github.com/oetiker/extopus"},"critical":{"readme":"Critical is my take on network/infrastructure monitoring. Here are the big\nideas:\n\n* Infrastructure as code: The monitoring system should be an internal DSL so it\n  can natively interact with any part of your infrastructure you can find or\n  write a library for. You should also be able to productively alter its guts if\n  you need to. This is a monitoring system for ops people who write code and\n  coders who do ops.\n* Client-based: This scales better, and is actually easier to configure if you\n  use configuration management, which you should be doing anyway.\n* Continuous verification: Critical has a single shot mode in\n  addition to the typical daemonized operation. This allows you to verify the\n  configuration on a host after making changes and then continuously monitor the\n  state of the system using the same verification tests.\n* Declarative: Declare what the state of your system is supposed to be.\n* Alerting and Trending together: a client/agent can do both of these at the\n  same time with less configuration overhead. It makes sense to keep them\n  separate on the server side.\n* Licensing: \"Do what thou wilt shall be the whole of the law,\" except for\n  patent trolls, etc. So, Apache 2.0 it is.\n  \nhttps://github.com/danielsdeleo/critical","git":"https://github.com/danielsdeleo/critical.git"},"collectd-graphite":{"readme":"This plugin acts as bridge between collectd's huge base of \navailable plugins and graphite's excellent graphing capabilities. \nIt sends collectd data directly to your graphite server.\n\nhttps://github.com/joemiller/collectd-graphite","git":"https://github.com/joemiller/collectd-graphite.git"},"opennms":{"readme":"OpenNMS is the worldâ€™s first enterprise grade network management application\nplatform developed under the open source model.\n\nhttp://www.opennms.org/\n","git":""},"jmxtrans":{"readme":"# jmxtrans\nInput: JMX\nOutput: Statsd, Graphite, Ganglia, RRD\n\nSort of a logstash for JMX metrics. Uses JSON for config files:\n\n[http://code.google.com/p/jmxtrans/](Page on googlecode)\n","git":""},"graphite":{"readme":"Graphite is an enterprise-scale monitoring tool that runs well on cheap \nhardware. It was originally designed and written by Chris Davis at Orbitz in \n2006 as side project that ultimately grew to be a foundational monitoring tool. \nIn 2008, Orbitz allowed Graphite to be released under the open source Apache \n2.0 license. Since then Chris has continued to work on Graphite and has \ndeployed it at other companies including Sears, where it serves as a pillar of \nthe e-commerce monitoring system. Today many large companies use it.\n\nhttp://graphite.wikidot.com/\n","git":"https://github.com/joemiller/collectd-graphite.git"},"zabbix":{"readme":"Zabbix is an enterprise-class open source distributed monitoring solution.\n\nhttp://www.zabbix.com/\n","git":""},"pandora-fms":{"readme":"\n\nPandora FMS is famous for being the guys that were throwing bottles of beer from the 2nd floor of the Roi d'Espagne during a Fosdem Beer event.\n\nIt was also the last year that the Roi d'Espagne hosted the Fosdem Beer event.\n\n\nhttp://pandorafms.org/\n\n","git":""},"munin":{"readme":"Munin is a networked resource monitoring tool that can help analyze resource \ntrends and \"what just happened to kill our performance?\" problems. It is \ndesigned to be very plug and play. A default installation provides a lot of \ngraphs with almost no work.\n\nhttp://munin-monitoring.org/\n","git":""},"flapjack":{"readme":"Flapjack is a scalable and distributed monitoring system. It natively\ntalks the Nagios plugin format, and can easily be scaled from\n1 server to 1000.\n\nFlapjack tries to adhere to the following tenets:\n\n* it should be simple to set up, configure, and maintain\n* it should easily scale from a single host to multiple\n\nhttp://flapjack-project.com/","git":"https://github.com/auxesis/flapjack.git"},"bigbrother":{"readme":"\nThere isn't anything out there that is more oldschool than Big Brother\n\nThe blinking green , red and orange lights  are in the mind of every senior unix person.\n\n\nhttp://bb4.com/\n\n","git":""},"zenoss":{"readme":"\nhttp://www.zenoss.com/\n","git":""},"rocksteady":{"readme":"Rocksteady is a java application that reads metrics from RabbitMQ, parse them and turn them into events so Esper(CEP) can query against those metric and react to events match by the query.\n\nRocksteady is an effort to utilize complex event process engine to analyze user defined metric. End goal is to derive root cause conclusion based on metric driven events. Rocksteady is only the metric analysis part of the whole picture, but we also present a solution including metric convention, metric sending, load balancing, and graphing that work well for us.\n\nhttp://code.google.com/p/rocksteady/\n","git":""},"overwatch":{"readme":"Overwatch is a monitoring application designed for flexibility in all aspects,\nfrom how data is collected to the way notifications are handled.\n\nhttps://github.com/danryan/overwatch\n","git":"https://github.com/danryan/overwatch"},"nagios":{"readme":"Nagios is a popular open source computer system and network monitoring software \napplication. It watches hosts and services, alerting users when things go wrong \nand again when they get better.\n\nhttp://www.nagios.org/\n","git":"git://github.com/auxesis/cucumber-nagios.git"},"folsom":{"readme":"Erlang application metrics gathering library.\n\nhttps://github.com/boundary/folsom/blob/master/README.md\n","git":""},"pencil":{"readme":"Graphite dashboard system\n\nhttps://github.com/fetep/pencil\n","git":"https://github.com/fetep/pencil"},"molog":{"readme":"\nMolog : \n\nhttp://www.smetj.net/wiki/Molog\n\nBuild a scalable monitor and search solution for application and system logs with Nagios.\n\nMolog is processing layer for a scalable logging infrastructure which consumes LogStash processed logs from RabbitMQ and sends updates to Nagios and ElasticSearch.\n\n* A stand alone daemon with configurable parallel workers.\n* Workers consume LogStash processed messages from RabbitMQ and perform ignore regex matching on them.\n* Regex rules can be applied to all LogStash generated fields.\n* Sends Nagios passive check results back to RabbitMQ.\n* Nagios check results can be consumed from RabbitMQ into Nagios using Krolyk.\n* Forwards and stores all messages to ElasticSearch.\n* Only stores references to ElasticSearch records in a MongoDB instance.\n* Provides REST API for querying and manipulating references and regexes.\n* Includes molog_cli an interactive REST client to manipulate records, matches and regexes. \n\nMoLog is written in Python. \n","git":"https://github.com/smetj/molog"},"etsy-nagios_tools":{"readme":"Nagios tools from the good folks at Etsy.  For example, \"check_graphite\"\n\nhttps://github.com/etsy/nagios_tools\n","git":"https://github.com/etsy/nagios_tools.git"},"disqus-nagios-plugins":{"readme":"[link](http://github.com/disqus/nagios-plugins)\n\nOnly check_graphite.rb for now.\n","git":"https://github.com/disqus/nagios-plugins"},"cucumber-nagios":{"readme":"cucumber-nagios allows you to write high-level behavioural tests of web application, and plug the results into Nagios.\n\n","git":"git://github.com/auxesis/cucumber-nagios.git"},"cacti":{"readme":"http://www.cacti.net/\n","git":""},"boomerang":{"readme":"End user oriented web performance testing and beaconing\n","git":"https://github.com/yahoo/boomerang/"},"resmon":{"readme":"Resmon is a lightweight utility for local host monitoring that can be queried\nby tools such as nagios over http. One of the main design goals is portability:\nthat resmon should require nothing more than a default install of Perl. Built\nwith the philosophy that \"we are smart because we are dumb,\" that is, local\nrequirements should be minimal to ease deployment on multiple platforms.\n\nhttp://labs.omniti.com/labs/resmon\n","git":""},"naglite2":{"readme":"Full screen Nagios viewer intended for NOC/monitoring screens\n","git":"https://github.com/lozzd/Naglite2"},"metrics":{"readme":"A Java application metrics gathering library.\n\nhttps://github.com/codahale/metrics/blob/development/README.md\n","git":""},"cloudkick-plugins":{"readme":"[link](https://github.com/cloudkick/agent-plugins)\n[homepage](http://cloudkick.com)\n\nA collection of custom plugins for the Cloudkick agent and Monitoring-As-A-Service provider.  Easily adapted to any number of monitoring tools.\n","git":"https://github.com/cloudkick/agent-plugins"},"README.md":{"readme":"# Tool Repo\n===========\nThis repository serves as a sort of master repository of various tools that people have come across.\n\nThe format for structure should be as follows:\n\n\ttop-level repo -\n\t\t\tproject_name -\n\t\t\t\t      README.md (review/information)\n\t\t\t\t      git submodule to repo (if appropriate)\n\nPlease do not put any actual code in here.\n\n\n## Example\n\nAdding a repo:\n\n\tgit submodule add https://github.com/username/project_name project_name/repo\n\techo \"[link](http://github.com/username/project_name)\" > project_name/README.md","git":""},"shinken":{"readme":"\nhttp://www.shinken-monitoring.org/\n\nNagois rewrite in Python.\n\n\n","git":""},"nagios-api":{"readme":"A REST-like, JSON interface to Nagios complete with CLI interface\n\n[link](https://github.com/xb95/nagios-api)\n","git":"https://github.com/xb95/nagios-api"},"mod-log-firstbyte":{"readme":"Apache 2.x module that measures time to first byte and exposes this as a new\nlog format string.  Code originally developed at Google and largely abandoned now.\n\nBe nice to get some more traction on this and even get it built into the official\nApache release.\n\nhttp://code.google.com/p/mod-log-firstbyte/\n","git":""},"groundwork":{"readme":"\n\n\nGroundWork \n\nbuild on top of nagios, Cacti and other toolso\n\n@botchagalupe once coined the term \"To pull a GroundWork\" meaning  , taking an Open Source project, building a wrapper around it  then selling it off a your own.\n\n\n","git":""},"epicnms":{"readme":"Monitoring framework for time based numeric data.\n\n[link](http://code.google.com/p/epicnms/)\n","git":""},"collectd":{"readme":"collectd gathers statistics about the system it is running on and stores \nthis information. Those statistics can then be used to find current\nperformance bottlenecks (i.e. performance analysis) and predict future \nsystem load (i.e. capacity planning). Or if you just want pretty graphs \nof your private server and are fed up with some homegrown solution you're\nat the right place, too ;).\n\nhttp://collectd.org/","git":"https://github.com/octo/collectd.git"},"statsd":{"readme":"A network daemon for aggregating statistics (counters and timers), rolling them \nup, then sending them to graphite.\n\n- https://github.com/etsy/statsd\n- http://codeascraft.etsy.com/2011/02/15/measure-anything-measure-everything/\n\nThere is a wide variety of statsd-compatible servers written in almost every language.\nFor additional statsd server implementations, see here:\nhttp://joemiller.me/2011/09/21/list-of-statsd-server-implementations/","git":"https://github.com/etsy/statsd.git"},"remote_syslog":{"readme":"[link](http://github.com/papertrail/remote_syslog)\n","git":"https://github.com/papertrail/remote_syslog"},"jolokia":{"readme":"Jolokia is remote JMX with JSON over HTTP.\n\nIt is fast, simple, polyglot and has unique features. It's JMX on Capsaicin.\n\n[link](http://labs.consol.de/lang/en/jolokia/)\n","git":""},"sensu":{"readme":"[link]https://github.com/sonian/sensu\n\nSensu is a ruby-based monitoring framework using Redis for data storage\nand RabbitMQ for communication.\n\nCreated at http://sonian.com by @portertech and released as open source in 2011.\n\nhttps://github.com/sonian/sensu\nhttps://github.com/sonian/sensu-dashboard\nhttps://github.com/sonian/sensu-plugins","git":""},"rivermuse":{"readme":"\nOnce touted as the ultimate opensource central event management and logging console.\nused to be vapourware for a long time .. \n\n\n\nRiverMuse CORE is an Open Source Fault and Event Management platform.\n\n\n\n\nhttp://www.rivermuse.com/\n\nhttp://rivermuse.org/\n","git":""},"logstash":{"readme":"[link](http://logstash.net/)\ncollects, parses, stores logs.\n\nCreated by Jordan Sissel (@jordansissel) who now works at Loggly.\n","git":"https://github.com/logstash/logstash"},"graylog2":{"readme":"[homepage](http://graylog2.org/)\n\n[server source](https://github.com/Graylog2/graylog2-server)\n\n[webui source](https://github.com/Graylog2/graylog2-web-interface)\n\nGraylog2 is a log storing framework using a MongoDB backend and a very nice UI for filtering and search.\n\nTaulia is hosting a live Graylog2 [demo](http://public-graylog2.taulia.com/) Log in with the user admin or user and the password graylog2\n","git":"https://github.com/Graylog2/graylog2-server"},"ganglia":{"readme":"Ganglia is a scalable distributed monitoring system for high-performance \ncomputing systems such as clusters and Grids. It is based on a hierarchical \ndesign targeted at federations of clusters. It leverages widely used \ntechnologies such as XML for data representation, XDR for compact, portable \ndata transport, and RRDtool for data storage and visualization. It uses \ncarefully engineered data structures and algorithms to achieve very low \nper-node overheads and high concurrency. The implementation is robust, has been \nported to an extensive set of operating systems and processor architectures, \nand is currently in use on thousands of clusters around the world. It has been \nused to link clusters across university campuses and around the world and can \nscale to handle clusters with 2000 nodes.\n\nGanglia is a BSD-licensed open-source project that grew out of the University \nof California, Berkeley Millennium Project which was initially funded in large \npart by the National Partnership for Advanced Computational Infrastructure \n(NPACI) and National Science Foundation RI Award EIA-9802069. NPACI is funded \nby the National Science Foundation and strives to advance science by creating a \nubiquitous, continuous, and pervasive national computational infrastructure: \nthe Grid. Current support comes from Planet Lab: an open platform for \ndeveloping, deploying, and accessing planetary-scale services.\n\nhttp://ganglia.sourceforge.net/\n","git":""},"fitb":{"readme":"FITB is a tool that automatically polls every port on a list of switches you give it. Simple configuration, precise polling, easy searching and automatic discovery of both new ports and ports that go offline are the goals of FITB. \n","git":"git://github.com/lozzd/FITB.git"},"esper":{"readme":"Esper is a component for complex event processing (CEP), available \nfor Java as Esper, and for .NET as NEsper.\n\nEsper and NEsper enable rapid development of applications that \nprocess large volumes of incoming messages or events. Esper and NEsper \nfilter and analyze events in various ways, and respond to conditions\nof interest in real-time.\n\n[tutorial](http://esper.codehaus.org/tutorials/tutorial/tutorial.html)\n[related](http://www.igvita.com/2011/05/27/streamsql-event-processing-with-esper/)\n\n","git":""},"opentsdb":{"readme":"OpenTSDB is a distributed, scalable Time Series Database (TSDB) written on \ntop of HBase. OpenTSDB was written to address a common need: store, index\nand serve metrics collected from computer systems (network gear, \noperating systems, applications) at a large scale, and make this data \neasily accessible and graphable.\n\nThanks to HBase's scalability, OpenTSDB allows you to collect many thousands\nof metrics from thousands of hosts and applications, at a high rate  (every \nfew seconds). OpenTSDB will never delete or downsample data and can easily \nstore billions of data points. As a matter of fact, StumbleUpon uses it to \nkeep track of hundred of thousands of time series and collects over \n100 million data points per day in their main production cluster.\n\nhttp://opentsdb.net/\n","git":""},"moncli":{"readme":"\nhttps://github.com/smetj/moncli/\n\nMoncli is a generic MONitoring CLIent which executes and processes requests on an external system in order to interact with the host's local information sources which are normally not available over the network. Once Moncli has executed and evaluated the request it submits the check results back into the message broker infrastructure, where the results are ready to be by another process.\n","git":"https://github.com/smetj/moncli.git"},"logster":{"readme":"Logster is a utility for reading log files and generating metrics in Graphite or \nGanglia. It is ideal for visualizing trends of events that are occurring in your \napplication/system/error logs. For example, you might use logster to graph the \nnumber of occurrences of HTTP response code that appears in your web server logs.\n","git":"https://github.com/etsy/logster"},"hobbit":{"readme":"\nAnd advanced version of Big Brother \n\n\nhttp://sourceforge.net/projects/hobbitmon/\n\n\nAs of 2010-07-09, this project may now be found at https://sourceforge.net/projects/xymon/.\n","git":""},"clockwork":{"readme":"Clockwork is a cron replacement. It runs as a lightweight, long-running Ruby \nprocess which sits alongside your web processes (Mongrel/Thin) and your \nworker processes (DJ/Resque/Minion/Stalker) to schedule recurring work at \nparticular times or dates. For example, refreshing feeds on an hourly basis,\nor send reminder emails on a nightly basis, or generating invoices once a\nmonth on the 1st.\n\nhttps://github.com/adamwiggins/clockwork","git":"https://github.com/adamwiggins/clockwork"},"reconnoiter":{"readme":"Reconnoiter's goal is to better the world of monitoring by marrying fault \ndetection and trending together. Through ease of configuration and ongoing \nmaintenance, Reconnoiter encourages monitoring important technical metrics \nalong side critical business metrics to improve awareness and ultimately \naccountability.\n\nhttps://labs.omniti.com/labs/reconnoiter\n","git":"https://github.com/omniti-labs/reconnoiter"},"rackspace-cloud-monitoring":{"readme":"## Rackspace Cloud Monitoring\n\nRackspace Cloud Monitoring analyzes cloud services and dedicated infrastructure\nusing a simple, yet powerful API. The API currently includes monitoring for\nexternal services. The key benefits you receive from using this API include the\nfollowing:\n\n### Use of Domain Specific Language I(DSL)\nThe Rackspace Cloud Monitoring API uses a DSL, which makes it a powerful tool\nfor configuring advanced monitoring features. For example, typically complex\ntasks, such as defining triggers on thresholds for metrics or performing an\ninverse string match become much easier with a concise, special purpose language\ncreated for defining alarms. For more information, see Alarms.\n\n### Monitoring from Multiple Datacenters\nRackspace Cloud Monitoring allows you to simultaneously monitor the performance\nof different resources from multiple datacenters and provides a clear picture of\noverall system health. It includes tunable parameters to interpret mixed results\nwhich help you to create deliberate and accurate alerting policies. See Alert\nPolicies for more information.\n\n### Alarms and Notifications\nWhen an alarm occurs on a monitored resource, Rackspace Cloud Monitoring sends\nyou a notification so that you can take the appropriate action to either prevent\nan adverse situation from occurring or rectify a situation that has already\noccurred. These notifications are sent based on the severity of the alert as\ndefined in the notification plan.\n\n## Links\n\n[Documentation](http://docs.rackspace.com/cm/api/v1.0/cm-devguide/content/overview.html)\n\n## Contact\n\n* IRC - #cloudmonitoring @ Freenode\n* Email - cmbeta [at] rackspace [dot] com\n","git":""},"porkchop":{"readme":"Porkchop is a simple network-based system information server. You write plugins for it and it responds with the data based on your request.\n\nCheck the readme for more info.\n\n[link](http://github.com/disqus/porkchop)\n","git":"https://github.com/disqus/porkchop"},"hyperic":{"readme":"\nHyperic HQ, \n\ngenerated a lot of fuzz back in 2007.\nthey then got acquired by Springsource \nwhich then got acquired by VMWare\ngone mostly silent\n\n\nhttp://www.hyperic.com/\n","git":""}}
